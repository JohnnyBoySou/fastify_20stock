

// === INTERFACES PARA QUOTE ===

export interface Quote {
  id: string;
  userId: string;
  title: string;
  description?: string;
  publicId: string;
  authCode: string;
  status: 'DRAFT' | 'PUBLISHED' | 'SENT' | 'VIEWED' | 'APPROVED' | 'REJECTED' | 'EXPIRED' | 'CONVERTED' | 'CANCELED';
  total: number;
  subtotal: number;
  discount?: number;
  interest?: number;
  paymentType: 'UNDEFINED' | 'PIX' | 'BOLETO' | 'CREDIT_CARD' | 'CASH' | 'TRANSFER';
  paymentTerms?: string;
  paymentDueDays?: number;
  expiresAt?: string;
  observations?: string;
  createdAt: string;
  updatedAt: string;
  items: Array<{
    id: string;
    productId: string;
    quantity: number;
    unitPrice: number;
    subtotal: number;
    discount?: number;
    note?: string;
    product: {
      id: string;
      name: string;
      description?: string;
      unitOfMeasure: string;
      referencePrice: number;
    };
  }>;
  installments: Array<{
    id: string;
    number: number;
    dueDate: string;
    amount: number;
    interest?: number;
  }>;
  user: {
    id: string;
    name: string;
    email: string;
  };
}

export interface PublicQuote {
  id: string;
  title: string;
  description?: string;
  status: 'DRAFT' | 'PUBLISHED' | 'SENT' | 'VIEWED' | 'APPROVED' | 'REJECTED' | 'EXPIRED' | 'CONVERTED' | 'CANCELED';
  total: number;
  subtotal: number;
  discount?: number;
  interest?: number;
  paymentType: 'UNDEFINED' | 'PIX' | 'BOLETO' | 'CREDIT_CARD' | 'CASH' | 'TRANSFER';
  paymentTerms?: string;
  paymentDueDays?: number;
  expiresAt?: string;
  observations?: string;
  createdAt: string;
  items: Array<{
    id: string;
    quantity: number;
    unitPrice: number;
    subtotal: number;
    discount?: number;
    note?: string;
    product: {
      id: string;
      name: string;
      description?: string;
      unitOfMeasure: string;
    };
  }>;
  installments: Array<{
    id: string;
    number: number;
    dueDate: string;
    amount: number;
    interest?: number;
  }>;
  user: {
    name: string;
  };
}

export interface Pagination {
  page: number;
  limit: number;
  total: number;
  totalPages: number;
}

export interface QuoteListResponse {
  items: Quote[];
  pagination: Pagination;
}

export interface CreateQuoteRequest {
  title: string;
  description?: string;
  paymentType: 'UNDEFINED' | 'PIX' | 'BOLETO' | 'CREDIT_CARD' | 'CASH' | 'TRANSFER';
  paymentTerms?: string;
  paymentDueDays?: number;
  expiresAt?: string;
  observations?: string;
  discount?: number;
  interest?: number;
  items: Array<{
    productId: string;
    quantity: number;
    unitPrice: number;
    discount?: number;
    note?: string;
  }>;
  installments?: Array<{
    number: number;
    dueDate: string;
    amount: number;
    interest?: number;
  }>;
}

export interface UpdateQuoteRequest {
  title?: string;
  description?: string;
  paymentType?: 'UNDEFINED' | 'PIX' | 'BOLETO' | 'CREDIT_CARD' | 'CASH' | 'TRANSFER';
  paymentTerms?: string;
  paymentDueDays?: number;
  expiresAt?: string;
  observations?: string;
  discount?: number;
  interest?: number;
  items?: Array<{
    id?: string;
    productId: string;
    quantity: number;
    unitPrice: number;
    discount?: number;
    note?: string;
  }>;
  installments?: Array<{
    id?: string;
    number: number;
    dueDate: string;
    amount: number;
    interest?: number;
  }>;
}

export interface QuoteStatsResponse {
  total: number;
  byStatus: {
    DRAFT: number;
    PUBLISHED: number;
    SENT: number;
    VIEWED: number;
    APPROVED: number;
    REJECTED: number;
    EXPIRED: number;
    CONVERTED: number;
    CANCELED: number;
  };
  totalValue: number;
  averageValue: number;
  recentCount: number;
}

export interface QuoteAnalyticsResponse {
  quote: Quote;
  analytics: {
    totalItems: number;
    totalQuantity: number;
    totalInstallments: number;
    averageItemValue: number;
    isExpired: boolean;
    daysUntilExpiry?: number;
    status: string;
    createdAt: string;
    updatedAt: string;
  };
}

export interface QuoteMovementResponse {
  quote: Quote;
  movements: Array<{
    id: string;
    type: string;
    quantity: number;
    productId: string;
    storeId: string;
    note: string;
    createdAt: string;
  }>;
}

export interface ApproveQuoteRequest {
  authCode: string;
}

export interface RejectQuoteRequest {
  authCode: string;
  reason?: string;
}

export interface UpdateQuoteStatusRequest {
  status: 'DRAFT' | 'PUBLISHED' | 'SENT' | 'VIEWED' | 'APPROVED' | 'REJECTED' | 'EXPIRED' | 'CONVERTED' | 'CANCELED';
}

export interface QuoteFilters {
  page?: number;
  limit?: number;
  search?: string;
  status?: 'DRAFT' | 'PUBLISHED' | 'SENT' | 'VIEWED' | 'APPROVED' | 'REJECTED' | 'EXPIRED' | 'CONVERTED' | 'CANCELED';
  userId?: string;
  startDate?: string;
  endDate?: string;
}

export interface QuoteByUserFilters {
  page?: number;
  limit?: number;
  status?: 'DRAFT' | 'PUBLISHED' | 'SENT' | 'VIEWED' | 'APPROVED' | 'REJECTED' | 'EXPIRED' | 'CONVERTED' | 'CANCELED';
}

export interface QuoteByStatusFilters {
  page?: number;
  limit?: number;
  userId?: string;
}

const URI = "/quotes";

export const QuoteService = {
  // === CRUD BÁSICO ===
  create: (params: CreateQuoteRequest): Promise<Quote> => 
    fetchAuth(URI, { method: "POST", data: params as unknown as Record<string, unknown> }),
  
  list: (filters?: QuoteFilters): Promise<QuoteListResponse> => 
    fetchAuth(URI, { method: "GET", params: filters as unknown as Record<string, unknown> }),
  
  get: (id: string): Promise<Quote> => 
    fetchAuth(`${URI}/${id}`, { method: "GET" }),
  
  update: (id: string, params: UpdateQuoteRequest): Promise<Quote> => 
    fetchAuth(`${URI}/${id}`, { method: "PUT", data: params as unknown as Record<string, unknown> }),
  
  delete: (id: string): Promise<void> => 
    fetchAuth(`${URI}/${id}`, { method: "DELETE" }),

  // === FUNÇÕES PÚBLICAS (sem autenticação) ===
  getPublic: (publicId: string, authCode: string): Promise<PublicQuote> => 
    fetchAuth(`${URI}/public/${publicId}`, { method: "GET", params: { authCode } }),
  
  approvePublic: (publicId: string, params: ApproveQuoteRequest): Promise<QuoteMovementResponse> => 
    fetchAuth(`${URI}/public/${publicId}/approve`, { method: "POST", data: params as unknown as Record<string, unknown> }),
  
  rejectPublic: (publicId: string, params: RejectQuoteRequest): Promise<Quote> => 
    fetchAuth(`${URI}/public/${publicId}/reject`, { method: "POST", data: params as unknown as Record<string, unknown> }),

  // === FUNÇÕES ADICIONAIS (autenticadas) ===
  updateStatus: (id: string, params: UpdateQuoteStatusRequest): Promise<Quote> => 
    fetchAuth(`${URI}/${id}/status`, { method: "PATCH", data: params as unknown as Record<string, unknown> }),
  
  publish: (id: string): Promise<Quote> => 
    fetchAuth(`${URI}/${id}/publish`, { method: "PATCH" }),
  
  send: (id: string): Promise<Quote> => 
    fetchAuth(`${URI}/${id}/send`, { method: "PATCH" }),
  
  convertToMovements: (id: string): Promise<QuoteMovementResponse> => 
    fetchAuth(`${URI}/${id}/convert`, { method: "POST" }),

  // === CONSULTAS POR ENTIDADE ===
  getByUser: (userId: string, filters?: QuoteByUserFilters): Promise<QuoteListResponse> => 
    fetchAuth(`${URI}/user/${userId}`, { method: "GET", params: filters }),
  
  getByStatus: (status: string, filters?: QuoteByStatusFilters): Promise<QuoteListResponse> => 
    fetchAuth(`${URI}/status/${status}`, { method: "GET", params: filters }),

  // === RELATÓRIOS E ESTATÍSTICAS ===
  getStats: (userId?: string): Promise<QuoteStatsResponse> => 
    fetchAuth(`${URI}/stats`, { method: "GET", params: { userId } }),
  
  search: (q: string, limit?: number, userId?: string): Promise<{ quotes: Quote[] }> => 
    fetchAuth(`${URI}/search`, { method: "GET", params: { q, limit, userId } }),
  
  getRecent: (limit?: number, userId?: string): Promise<{ quotes: Quote[] }> => 
    fetchAuth(`${URI}/recent`, { method: "GET", params: { limit, userId } }),

  getAnalytics: (id: string): Promise<QuoteAnalyticsResponse> => 
    fetchAuth(`${URI}/${id}/analytics`, { method: "GET" }),

  // === FUNÇÕES ESPECÍFICAS ===
  getByType: (paymentType: string, filters?: {
    userId?: string;
    status?: string;
    startDate?: string;
    endDate?: string;
    page?: number;
    limit?: number;
  }): Promise<QuoteListResponse> => 
    fetchAuth(`${URI}/payment-type/${paymentType}`, { method: "GET", params: filters }),
  
  getByDateRange: (startDate: string, endDate: string, filters?: {
    userId?: string;
    status?: string;
    paymentType?: string;
    page?: number;
    limit?: number;
  }): Promise<QuoteListResponse> => 
    fetchAuth(`${URI}/date-range`, { method: "GET", params: { startDate, endDate, ...filters } }),
  
  getExpired: (): Promise<{ quotes: Quote[] }> => 
    fetchAuth(`${URI}/expired`, { method: "GET" }),
  
  getPendingApproval: (userId?: string): Promise<{ quotes: Quote[] }> => 
    fetchAuth(`${URI}/pending-approval`, { method: "GET", params: { userId } }),

  // === RELATÓRIOS ESPECÍFICOS ===
  getQuoteReport: (filters?: {
    userId?: string;
    status?: string;
    paymentType?: string;
    startDate?: string;
    endDate?: string;
    groupBy?: 'day' | 'week' | 'month' | 'year';
  }): Promise<{
    summary: {
      totalQuotes: number;
      totalValue: number;
      period: {
        startDate: string;
        endDate: string;
      };
    };
    data: Array<{
      date: string;
      quotes: number;
      value: number;
      approved: number;
      rejected: number;
      expired: number;
    }>;
    byStatus: {
      DRAFT: { count: number; value: number };
      PUBLISHED: { count: number; value: number };
      SENT: { count: number; value: number };
      VIEWED: { count: number; value: number };
      APPROVED: { count: number; value: number };
      REJECTED: { count: number; value: number };
      EXPIRED: { count: number; value: number };
      CONVERTED: { count: number; value: number };
      CANCELED: { count: number; value: number };
    };
    byPaymentType: Array<{
      paymentType: string;
      count: number;
      value: number;
    }>;
    byUser: Array<{
      userId: string;
      userName: string;
      count: number;
      value: number;
    }>;
  }> => 
    fetchAuth(`${URI}/report`, { method: "GET", params: filters }),
  
  getProductReport: (productId?: string, filters?: {
    startDate?: string;
    endDate?: string;
    userId?: string;
  }): Promise<{
    product: {
      id: string;
      name: string;
      unitOfMeasure: string;
    };
    quotes: number;
    totalQuantity: number;
    totalValue: number;
    averageValue: number;
    byStatus: Array<{
      status: string;
      count: number;
      value: number;
    }>;
  }> => 
    fetchAuth(`${URI}/product-report`, { method: "GET", params: { productId, ...filters } }),
  
  getUserReport: (userId?: string, filters?: {
    startDate?: string;
    endDate?: string;
  }): Promise<{
    user: {
      id: string;
      name: string;
      email: string;
    };
    quotes: number;
    totalValue: number;
    averageValue: number;
    byStatus: Array<{
      status: string;
      count: number;
      value: number;
    }>;
    byPaymentType: Array<{
      paymentType: string;
      count: number;
      value: number;
    }>;
  }> => 
    fetchAuth(`${URI}/user-report`, { method: "GET", params: { userId, ...filters } }),

  // === OPERAÇÕES EM LOTE ===
  updateBulk: (updates: Array<{ id: string; data: UpdateQuoteRequest }>): Promise<{ 
    updated: number; 
    errors: string[] 
  }> => 
    fetchAuth(`${URI}/bulk-update`, { method: "POST", data: { updates } }),
  
  deleteBulk: (ids: string[]): Promise<{ 
    deleted: number; 
    errors: string[] 
  }> => 
    fetchAuth(`${URI}/bulk-delete`, { method: "POST", data: { ids } }),

  // === VERIFICAÇÃO E CANCELAMENTO ===
  markExpired: (): Promise<{
    message: string;
    expiredCount: number;
  }> => 
    fetchAuth(`${URI}/mark-expired`, { method: "POST" }),
  
  getExpiredQuotes: (filters?: {
    page?: number;
    limit?: number;
    userId?: string;
  }): Promise<QuoteListResponse> => 
    fetchAuth(`${URI}/expired-quotes`, { method: "GET", params: filters }),
  
  getCancelledQuotes: (filters?: {
    page?: number;
    limit?: number;
    userId?: string;
    startDate?: string;
    endDate?: string;
  }): Promise<QuoteListResponse> => 
    fetchAuth(`${URI}/cancelled`, { method: "GET", params: filters }),

  // === UTILITÁRIOS ===
  export: (filters?: QuoteFilters): Promise<{ downloadUrl: string }> => 
    fetchAuth(`${URI}/export`, { method: "POST", data: filters as Record<string, unknown> }),
  
  validate: (quote: CreateQuoteRequest): Promise<{
    valid: boolean;
    errors: string[];
    warnings: string[];
  }> => 
    fetchAuth(`${URI}/validate`, { method: "POST", data: quote as unknown as Record<string, unknown>}),
  
  getQuoteStatuses: (): Promise<Array<{
    status: string;
    label: string;
    description: string;
  }>> => 
    fetchAuth(`${URI}/statuses`, { method: "GET" }),
  
  getPaymentTypes: (): Promise<Array<{
    type: string;
    label: string;
    description: string;
  }>> => 
    fetchAuth(`${URI}/payment-types`, { method: "GET" }),

  // === FUNÇÕES ESPECÍFICAS PARA DASHBOARD ===
  getDashboardStats: (userId?: string): Promise<{
    totalQuotes: number;
    pendingApproval: number;
    approvedToday: number;
    rejectedToday: number;
    totalValue: number;
    averageValue: number;
    conversionRate: number;
    recentActivity: Array<{
      id: string;
      title: string;
      status: string;
      value: number;
      createdAt: string;
    }>;
  }> => 
    fetchAuth(`${URI}/dashboard-stats`, { method: "GET", params: { userId } }),

  // === FUNÇÕES PARA NOTIFICAÇÕES ===
  getQuotesNeedingAttention: (userId?: string): Promise<{
    expired: Quote[];
    pendingApproval: Quote[];
    rejected: Quote[];
  }> => 
    fetchAuth(`${URI}/needing-attention`, { method: "GET", params: { userId } }),
};

// === FUNÇÕES ESPECÍFICAS USADAS PELOS COMPONENTES ===

export const listQuotes = (filters?: QuoteFilters) => QuoteService.list(filters);
export const searchQuotes = (q: string, limit?: number, userId?: string) => QuoteService.search(q, limit, userId);
export const showQuote = (id: string) => QuoteService.get(id);
export const addQuote = (params: CreateQuoteRequest) => QuoteService.create(params);
export const editQuote = (id: string, params: UpdateQuoteRequest) => QuoteService.update(id, params);
export const deleteQuote = (id: string) => QuoteService.delete(id);

// === FUNÇÕES PÚBLICAS ===
export const getPublicQuote = (publicId: string, authCode: string) => QuoteService.getPublic(publicId, authCode);
export const approveQuote = (publicId: string, authCode: string) => QuoteService.approvePublic(publicId, { authCode });
export const rejectQuote = (publicId: string, authCode: string, reason?: string) => QuoteService.rejectPublic(publicId, { authCode, reason });

// === FUNÇÕES ADICIONAIS ===
export const publishQuote = (id: string) => QuoteService.publish(id);
export const sendQuote = (id: string) => QuoteService.send(id);
export const convertQuoteToMovements = (id: string) => QuoteService.convertToMovements(id);
export const updateQuoteStatus = (id: string, status: 'DRAFT' | 'PUBLISHED' | 'SENT' | 'VIEWED' | 'APPROVED' | 'REJECTED' | 'EXPIRED' | 'CONVERTED' | 'CANCELED') => QuoteService.updateStatus(id, { status });

// === FUNÇÕES DE CONSULTA ===
export const listQuotesByUser = (userId: string, filters?: QuoteByUserFilters) => QuoteService.getByUser(userId, filters);
export const listQuotesByStatus = (status: string, filters?: QuoteByStatusFilters) => QuoteService.getByStatus(status, filters);
export const getQuoteStats = (userId?: string) => QuoteService.getStats(userId);
export const getQuoteAnalytics = (id: string) => QuoteService.getAnalytics(id);

// === FUNÇÕES DE RELATÓRIO ===
export const getQuoteReport = (filters?: any) => QuoteService.getQuoteReport(filters);
export const getProductQuoteReport = (productId?: string, filters?: any) => QuoteService.getProductReport(productId, filters);
export const getUserQuoteReport = (userId?: string, filters?: any) => QuoteService.getUserReport(userId, filters);

// === FUNÇÕES DE DASHBOARD ===
export const getQuoteDashboardStats = (userId?: string) => QuoteService.getDashboardStats(userId);
export const getQuotesNeedingAttention = (userId?: string) => QuoteService.getQuotesNeedingAttention(userId);