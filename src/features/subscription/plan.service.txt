import { fetchAuth } from "@/services/http/fetch";
import { z } from "zod";

// === SCHEMAS ZOD PARA VALIDAÇÃO ===

// === INVOICE SCHEMAS ===
export const InvoiceCreateSchema = z.object({
    customerId: z.string().min(1, "Customer ID é obrigatório"),
    amount: z
        .number()
        .positive("O valor deve ser positivo"),
    status: z.enum(['PENDING', 'PAID', 'FAILED']).default('PENDING'),
    gatewayPaymentId: z.string().optional(),
    paymentDate: z.string().optional(),
});

export type InvoiceCreateFormData = z.infer<typeof InvoiceCreateSchema>;

export const InvoiceUpdateSchema = z.object({
    amount: z
        .number()
        .positive("O valor deve ser positivo")
        .optional(),
    status: z.enum(['PENDING', 'PAID', 'FAILED']).optional(),
    gatewayPaymentId: z.string().optional(),
    paymentDate: z.string().optional(),
});

export type InvoiceUpdateFormData = z.infer<typeof InvoiceUpdateSchema>;

export const InvoiceStatusUpdateSchema = z.object({
    status: z.enum(['PENDING', 'PAID', 'FAILED']),
    paymentDate: z.string().optional(),
    gatewayPaymentId: z.string().optional(),
});

export type InvoiceStatusUpdateFormData = z.infer<typeof InvoiceStatusUpdateSchema>;

export const PaymentRetrySchema = z.object({
    gateway: z.string().optional(),
    paymentMethod: z.any().optional(),
});

export type PaymentRetryFormData = z.infer<typeof PaymentRetrySchema>;

export const SendEmailSchema = z.object({
    email: z.string().email("Email inválido").optional(),
    includePdf: z.boolean().default(false),
});

export type SendEmailFormData = z.infer<typeof SendEmailSchema>;

// === INTERFACES PARA INVOICE ===

export type InvoiceStatus = 'PENDING' | 'PAID' | 'FAILED';

export interface Invoice {
    id: string;
    customerId: string;
    amount: number;
    status: InvoiceStatus;
    gatewayPaymentId?: string;
    paymentDate?: string;
    createdAt: string;
    updatedAt: string;
    customer?: {
        id: string;
        userId: string;
        status: string;
        user: {
            id: string;
            name: string;
            email: string;
            phone?: string;
        };
        plan?: {
            id: string;
            name: string;
            description?: string;
            price: number;
            interval: string;
        };
    };
}

export interface Pagination {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
}

export interface InvoiceListResponse {
    items: Invoice[];
    pagination: Pagination;
}

export interface InvoiceCreateRequest {
    customerId: string;
    amount: number;
    status?: InvoiceStatus;
    gatewayPaymentId?: string;
    paymentDate?: string;
}

export interface InvoiceUpdateRequest {
    amount?: number;
    status?: InvoiceStatus;
    gatewayPaymentId?: string;
    paymentDate?: string;
}

export interface InvoiceStats {
    total: number;
    pending: number;
    paid: number;
    failed: number;
    totalAmount: number;
    totalPaid: number;
    totalPending: number;
    totalFailed: number;
    averageAmount: number;
    conversionRate: number;
}

export interface RevenueResponse {
    totalRevenue: number;
    period: {
        startDate: string;
        endDate: string;
    };
    breakdown: {
        paid: number;
        pending: number;
        failed: number;
    };
}

export interface PaymentRetryResponse {
    invoice: Invoice;
    retryResult: {
        success: boolean;
        gatewayResponse?: any;
        error?: string;
    };
}

export interface EmailSendResponse {
    invoice: Invoice;
    emailResult: {
        success: boolean;
        messageId?: string;
        error?: string;
    };
}

export interface PdfGenerateResponse {
    success: boolean;
    data?: any;
    error?: string;
}

// === INVOICE SERVICE ===

const INVOICE_URI = "/invoices";

export const InvoiceService = {
    // === CRUD BÁSICO ===
    create: (params: InvoiceCreateRequest): Promise<Invoice> => 
        fetchAuth(INVOICE_URI, { method: "POST", data: params as unknown as Record<string, unknown> }) as Promise<Invoice>,
    
    list: (params?: { 
        page?: number; 
        limit?: number; 
        customerId?: string;
        status?: InvoiceStatus;
        startDate?: string;
        endDate?: string;
    }): Promise<InvoiceListResponse> => 
        fetchAuth(INVOICE_URI, { method: "GET", params }) as Promise<InvoiceListResponse>,
    
    single: (id: string): Promise<Invoice> => 
        fetchAuth(`${INVOICE_URI}/${id}`, { method: "GET" }) as Promise<Invoice>,
    
    update: (id: string, params: InvoiceUpdateRequest): Promise<Invoice> => 
        fetchAuth(`${INVOICE_URI}/${id}`, { method: "PUT", data: params as unknown as Record<string, unknown> }) as Promise<Invoice>,
    
    delete: (id: string): Promise<void> => 
        fetchAuth(`${INVOICE_URI}/${id}`, { method: "DELETE" }) as Promise<void>,

    // === CONSULTAS ESPECÍFICAS ===
    getByCustomer: (customerId: string, params?: { 
        page?: number; 
        limit?: number; 
        status?: InvoiceStatus;
    }): Promise<InvoiceListResponse> => 
        fetchAuth(`${INVOICE_URI}/customer/${customerId}`, { method: "GET", params }) as Promise<InvoiceListResponse>,
    
    getPending: (): Promise<{ invoices: Invoice[] }> => 
        fetchAuth(`${INVOICE_URI}/pending`, { method: "GET" }) as Promise<{ invoices: Invoice[] }>,
    
    getFailed: (): Promise<{ invoices: Invoice[] }> => 
        fetchAuth(`${INVOICE_URI}/failed`, { method: "GET" }) as Promise<{ invoices: Invoice[] }>,
    
    getOverdue: (): Promise<{ invoices: Invoice[] }> => 
        fetchAuth(`${INVOICE_URI}/overdue`, { method: "GET" }) as Promise<{ invoices: Invoice[] }>,
    
    getStats: (): Promise<InvoiceStats> => 
        fetchAuth(`${INVOICE_URI}/stats`, { method: "GET" }) as Promise<InvoiceStats>,
    
    getRevenue: (params?: { 
        startDate?: string; 
        endDate?: string; 
    }): Promise<RevenueResponse> => 
        fetchAuth(`${INVOICE_URI}/revenue`, { method: "GET", params }) as Promise<RevenueResponse>,
    
    getPdf: (id: string): Promise<PdfGenerateResponse> => 
        fetchAuth(`${INVOICE_URI}/${id}/pdf`, { method: "GET" }) as Promise<PdfGenerateResponse>,

    // === GERENCIAMENTO DE STATUS ===
    updateStatus: (id: string, params: { 
        status: InvoiceStatus; 
        paymentDate?: string; 
        gatewayPaymentId?: string; 
    }): Promise<Invoice> => 
        fetchAuth(`${INVOICE_URI}/${id}/status`, { method: "PATCH", data: params }) as Promise<Invoice>,
    
    markAsPaid: (id: string, gatewayPaymentId?: string): Promise<Invoice> => 
        fetchAuth(`${INVOICE_URI}/${id}/mark-paid`, { method: "PATCH", data: { gatewayPaymentId } }) as Promise<Invoice>,
    
    markAsFailed: (id: string): Promise<Invoice> => 
        fetchAuth(`${INVOICE_URI}/${id}/mark-failed`, { method: "PATCH" }) as Promise<Invoice>,

    // === GERENCIAMENTO DE PAGAMENTO ===
    retryPayment: (id: string, params: { 
        gateway?: string; 
        paymentMethod?: any; 
    }): Promise<PaymentRetryResponse> => 
        fetchAuth(`${INVOICE_URI}/${id}/retry`, { method: "POST", data: params }) as Promise<PaymentRetryResponse>,

    // === ENVIO DE EMAIL ===
    sendEmail: (id: string, params: { 
        email?: string; 
        includePdf?: boolean; 
    }): Promise<EmailSendResponse> => 
        fetchAuth(`${INVOICE_URI}/${id}/send-email`, { method: "POST", data: params }) as Promise<EmailSendResponse>,

    // === REACT QUERY KEYS ===
    keys: {
        all: ["invoices"] as const,
        lists: () => [...InvoiceService.keys.all, "list"] as const,
        list: (page: number) => [...InvoiceService.keys.lists(), page.toString()] as const,
        details: () => [...InvoiceService.keys.all, "detail"] as const,
        single: (id: string) => [...InvoiceService.keys.details(), id] as const,
        pending: () => [...InvoiceService.keys.all, "pending"] as const,
        failed: () => [...InvoiceService.keys.all, "failed"] as const,
        overdue: () => [...InvoiceService.keys.all, "overdue"] as const,
        stats: () => [...InvoiceService.keys.all, "stats"] as const,
        revenue: (startDate?: string, endDate?: string) => [...InvoiceService.keys.all, "revenue", startDate || "all", endDate || "all"] as const,
        customer: (customerId: string) => [...InvoiceService.keys.all, "customer", customerId] as const,
        pdf: (id: string) => [...InvoiceService.keys.single(id), "pdf"] as const,
    }
};

// === EXPORTS ===
export default InvoiceService;
