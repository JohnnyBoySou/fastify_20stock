/// ===============================
///  QUOTATION (QUOTE) STRUCTURE
///  - Orçamentos criados pelos usuários.
///  - Possuem link público seguro (publicId + authCode).
///  - Base para aprovações, conversões e vendas.
/// ===============================

model Quote {
  id              String        @id @default(cuid())

  // Associação principal
  storeId         String
  store           Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerId      String?       // futuro: cliente vinculado (CRM)
  customerName    String?       // nome do cliente externo (sem login)

  // Identificação
  title           String
  description     String?
  publicId        String        @unique @default(uuid())   // usado no link público
  authCode        String        @default(uuid())           // valida acesso sem login

  // Status e controle
  status          QuoteStatus   @default(DRAFT)
  expiresAt       DateTime?
  viewedAt        DateTime?
  approvedAt      DateTime?
  rejectedAt      DateTime?
  convertedAt     DateTime?
  canceledAt      DateTime?
  approvalNote    String?       // observação do cliente (motivo ou comentário)
  ipAddress       String?       // IP de quem visualizou/aprovou
  viewedBy        String?       // email ou nome informado ao visualizar

  // Valores
  subtotal        Decimal       @db.Decimal(10, 2)
  discount        Decimal?      @db.Decimal(10, 2)
  interest        Decimal?      @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  currency        String        @default("BRL")

  // Pagamento
  paymentType     PaymentType   @default(UNDEFINED)
  paymentTerms    String?       // ex: "6x sem juros"
  paymentDueDays  Int?          // ex: 15 dias no boleto

  // Observações e anotações
  observations    String?
  notesInternal   String?       // observação visível apenas internamente (não pública)

  // Auditoria
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?     // soft delete

  // Relações
  items           QuoteItem[]
  installments    QuoteInstallment[]

  @@map("quotes")

  // Índices
  @@index([storeId])
  @@index([userId])
  @@index([status])
  @@index([publicId])
  @@index([createdAt])
}

/// ===============================
///  QUOTE ITEM
///  - Produtos incluídos no orçamento.
/// ===============================

model QuoteItem {
  id          String   @id @default(cuid())
  quoteId     String
  productId   String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  subtotal    Decimal  @db.Decimal(10, 2)
  discount    Decimal? @db.Decimal(10, 2)
  note        String?

  quote       Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("quote_items")
  @@unique([quoteId, productId])
  @@index([quoteId])
}

/// ===============================
///  QUOTE INSTALLMENTS
///  - Parcelas de pagamento do orçamento.
/// ===============================

model QuoteInstallment {
  id          String   @id @default(cuid())
  quoteId     String
  number      Int          // número da parcela
  dueDate     DateTime
  amount      Decimal      @db.Decimal(10, 2)
  interest    Decimal?     @db.Decimal(10, 2)
  paidAt      DateTime?

  quote       Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("quote_installments")
  @@index([quoteId])
}

/// ===============================
///  ENUMS
/// ===============================

enum PaymentType {
  UNDEFINED
  PIX
  BOLETO
  CREDIT_CARD
  CASH
  TRANSFER
}

enum QuoteStatus {
  DRAFT        // Em edição
  PUBLISHED    // Link público ativo
  SENT         // Enviado ao cliente
  VIEWED       // Cliente visualizou
  APPROVED     // Cliente aprovou
  REJECTED     // Cliente recusou
  EXPIRED      // Passou da validade
  CONVERTED    // Virou venda
  CANCELED     // Cancelado
}
