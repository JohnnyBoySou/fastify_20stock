/// ===============================
///  CHAT FEATURE (AI ASSISTANT)
///  - Sistema de chat com IA integrado ao 25Stock.
///  - Cada sessão pertence a um usuário (e opcionalmente a uma loja).
///  - Permite múltiplas sessões simultâneas.
/// ===============================

model ChatSession {
  id              String         @id @default(cuid())
  userId          String
  storeId         String?
  title           String?        // título exibido no histórico (ex: "Reajuste de preços")
  model           String?        // modelo usado (ex: gpt-4-turbo)
  temperature     Float?         // temperatura padrão da sessão
  context         Json?          // contexto global da sessão (loja, user, histórico)
  metadata        Json?          // dados adicionais (ex: tags, origem)
  active          Boolean        @default(true)
  isPinned        Boolean        @default(false) // fixado no topo
  deletedAt       DateTime?      // soft delete

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastActivityAt  DateTime?      // última mensagem trocada

  // Relações
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  store           Store?         @relation(fields: [storeId], references: [id], onDelete: SetNull)
  messages        ChatMessage[]

  @@map("chat_sessions")
  @@index([userId])
  @@index([storeId])
  @@index([createdAt])
  @@index([deletedAt])
}

/// ===============================
///  CHAT MESSAGE
///  - Cada mensagem trocada (usuário ↔ IA)
/// ===============================

model ChatMessage {
  id              String          @id @default(cuid())
  sessionId       String
  role            ChatMessageRole @default(USER)
  content         String
  tokens          Int?            // número de tokens consumidos
  model           String?         // modelo usado nessa resposta (pode mudar)
  context         Json?           // contexto adicional (dados da loja, produto, etc.)
  options         Json?           // parâmetros de geração (temperature, top_p, etc.)
  error           String?         // erro da geração (se houver)
  cost            Decimal?        @db.Decimal(10, 4) // custo da requisição
  latencyMs       Int?            // duração da requisição
  isFinal         Boolean         @default(false) // resposta finalizada
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  session         ChatSession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
  @@index([sessionId])
  @@index([role])
  @@index([createdAt])
}

/// ===============================
///  ENUMS
/// ===============================

enum ChatMessageRole {
  USER       // Usuário humano
  ASSISTANT  // Resposta da IA
  SYSTEM     // Mensagem de sistema ou contexto
  TOOL       // Execução de ferramenta (ex: busca, ação)
}
