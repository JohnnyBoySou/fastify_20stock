/// ===============================
///  FLOW AUTOMATION STRUCTURE
///  - Sistema de automação baseado em nodes.
///  - Cada flow pertence a uma loja e a um usuário.
///  - Pode conter triggers, conditions, actions e notifications.
///  - Base para IA, notificações automáticas e rotinas.
/// ===============================

model Flow {
  id            String          @id @default(cuid())

  // Identificação
  name          String
  description   String?
  version       Int             @default(1) // para controle de versões
  category      String?         // ex: "notificação", "estoque", "CRM"

  // Estrutura do workflow (ReactFlow)
  nodes         Json            // array de nodes
  edges         Json            // conexões entre nodes
  metadata      Json?           // metadados do flow (layout, variáveis globais, etc.)

  // Controle de status
  status        FlowStatus      @default(DRAFT)
  isPublic      Boolean         @default(false)
  deletedAt     DateTime?       // soft delete

  // Associação
  storeId       String
  store         Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdBy     String
  creator       User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  // Auditoria
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastRunAt     DateTime?
  lastStatus    FlowExecutionStatus?

  // Relações
  flowNodes     FlowNode[]
  executions    FlowExecution[]

  @@map("flows")

  // Índices
  @@index([storeId])
  @@index([status])
  @@index([deletedAt])
  @@index([createdAt])
}

model FlowNode {
  id            String       @id @default(cuid())
  flowId        String
  nodeId        String       // ID do node (ReactFlow ID)
  type          FlowNodeType
  name          String?      // nome visível no editor
  config        Json         // configuração do node (ex: { "trigger": "stock_low" })
  order         Int          @default(0)
  parentNodeId  String?      // para nodes agrupados
  position      Json?        // posição no editor (x, y)
  metadata      Json?        // metadados adicionais

  // Auditoria
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  flow          Flow         @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map("flow_nodes")
  @@unique([flowId, nodeId])
  @@index([type])
  @@index([order])
}

model FlowExecution {
  id             String              @id @default(cuid())
  flowId         String
  flow           Flow                @relation(fields: [flowId], references: [id], onDelete: Cascade)

  // Execução
  status         FlowExecutionStatus @default(RUNNING)
  triggerType    String              // ex: "stock_alert", "manual", "schedule"
  triggerData    Json                // payload do evento disparador
  context        Json?               // contexto adicional (ex: { "productId": "...", "userId": "..." })
  executionLog   Json?               // logs detalhados (por node)
  error          String?
  durationMs     Int?                // duração total
  startedAt      DateTime            @default(now())
  completedAt    DateTime?

  // Auditoria
  executedById   String?
  executedBy     User?               @relation(fields: [executedById], references: [id], onDelete: SetNull)
  storeId        String?
  store          Store?              @relation(fields: [storeId], references: [id], onDelete: SetNull)

  @@map("flow_executions")
  @@index([flowId])
  @@index([status])
  @@index([startedAt])
  @@index([storeId])
}

/// ===============================
///  ENUMS
/// ===============================

enum FlowStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum FlowNodeType {
  TRIGGER
  CONDITION
  ACTION
  NOTIFICATION
}

enum FlowExecutionStatus {
  SUCCESS
  FAILED
  RUNNING
  CANCELLED
}
