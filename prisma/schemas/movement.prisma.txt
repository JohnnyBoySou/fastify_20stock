/// ===============================
///  MOVEMENT STRUCTURE
///  - Registra qualquer entrada, saída ou perda de produto.
///  - Controla saldo, custo e origem.
///  - É base para relatórios, IA e auditoria de estoque.
/// ===============================

model Movement {
    id String @id @default(cuid())

    // Identificação e contexto
    type          MovementType // ENTRADA, SAIDA, PERDA
    origin        MovementOrigin? // motivo ou contexto da movimentação
    referenceCode String? // código externo opcional (nota, pedido, etc.)
    note          String? // observações gerais

    // Estoque e valores
    quantity      Int
    price         Decimal?  @db.Decimal(10, 2) // valor unitário da movimentação
    totalValue    Decimal?  @db.Decimal(10, 2) // quantity * price
    balanceBefore Int? // estoque antes da movimentação
    balanceAfter  Int? // estoque após a movimentação
    batch         String? // lote
    expiration    DateTime? // validade (se aplicável)

    // Relacionamentos
    storeId String
    store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    supplierId String?
    supplier   Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)

    userId String? // quem registrou
    user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

    // Verificação e controle
    verified         Boolean   @default(false)
    verifiedAt       DateTime?
    verifiedBy       String?
    verificationNote String?

    // Cancelamento
    cancelled          Boolean   @default(false)
    cancelledAt        DateTime?
    cancelledBy        String?
    cancellationReason String?

    // Auditoria e status
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime? // soft delete, se precisar reverter algo manualmente

    // Metadados e IA
    metadata Json? // dados extras: { "source": "import", "autoGenerated": true }

    // Índices e otimizações
    @@index([storeId])
    @@index([productId])
    @@index([type])
    @@index([createdAt])
    @@index([cancelled])
    @@index([verified])
    @@map("movements")
    @@schema("movement")
}

/// ===============================
///  MOVEMENT ENUMS
///  - Type = direção da movimentação (entrada/saída/perda)
///  - Origin = motivo ou contexto da movimentação
/// ===============================

enum MovementType {
    INBOUND // Entrada de produtos no estoque
    OUTBOUND // Saída de produtos
    LOSS // Perda ou descarte
    @@schema("movement")
}

enum MovementOrigin {
    PURCHASE // Compra de fornecedor
    SALE // Venda a cliente
    RETURN // Devolução de cliente
    SUPPLIER_RETURN // Devolução ao fornecedor
    ADJUSTMENT // Ajuste manual de estoque
    TRANSFER // Transferência entre locais
    INVENTORY // Ajuste por contagem/inventário
    DAMAGE // Quebra ou dano
    EXPIRATION // Produto vencido
    OTHER // Outro motivo não especificado
    @@schema("movement")
}
